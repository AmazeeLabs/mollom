<?php
// $Id$

/**
 * @file
 * Install and uninstall functions as well as schema definition for the Mollom module.
 */

/**
 * Implements hook_requirements().
 *
 * @param $check
 *   (optional) Boolean whether to re-check the module's installation and
 *   configuration status. Defaults to TRUE, as this argument is not passed for
 *   hook_requirements() by default. Passing FALSE allows other run-time code
 *   to re-generate requirements error messages to be displayed on other pages
 *   than the site's system status report page.
 *
 * @see mollom_init()
 * @see mollom_admin_settings()
 * @see _mollom_status()
 */
function mollom_requirements($phase = 'runtime', $check = TRUE) {
  $requirements = array();
  if ($phase == 'runtime') {
    $status = _mollom_status($check);
    // Immediately return if everything is in order.
    if ($status === TRUE) {
      return $requirements;
    }
    // If not, something is wrong; prepare the requirements entry and set
    // defaults for any yet unknown edge-cases.
    $requirements['mollom'] = array(
      'title' => 'Mollom API keys',
      'value' => '',
      'severity' => REQUIREMENT_ERROR,
    );
    // Append a link to the settings page to the error message on all pages,
    // except on the settings page itself. These error messages also need to be
    // shown on the settings page, since Mollom API keys can be entered later.
    $admin_message = '';
    if ($_GET['q'] != 'admin/config/content/mollom/settings') {
      $admin_message = t('Visit the <a href="@settings-url">Mollom settings page</a> to configure your keys.', array(
        '@settings-url' => url('admin/config/content/mollom/settings'),
      ));
    }
    // Generate an appropriate error message:
    // Missing API keys.
    if (!$status['keys']) {
      $requirements['mollom']['value'] = t('Not configured');
      $requirements['mollom']['description'] = t('The Mollom API keys are not configured yet. !admin-message', array(
        '!admin-message' => $admin_message,
      ));
    }
    // Invalid API keys.
    elseif ($status['keys valid'] === MOLLOM_ERROR) {
      $requirements['mollom']['value'] = t('Invalid');
      $requirements['mollom']['description'] = t('The configured Mollom API keys are invalid. !admin-message', array(
        '!admin-message' => $admin_message,
      ));
    }
    // Communication error.
    elseif ($status['keys valid'] === NETWORK_ERROR) {
      $requirements['mollom']['value'] = t('Network error');
      $requirements['mollom']['description'] = t('The Mollom servers could not be contacted. Please make sure that your web server can make outgoing HTTP requests.');
    }
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function mollom_schema() {
  $schema['mollom'] = array(
    'description' => 'Tracks content spam statuses.',
    'fields' => array(
      'entity' => array(
        'description' => 'The entity type of the content.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'did' => array(
        'description' => 'Unique data ID of the content.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'session' => array(
        'description' => "Content author's session ID.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the data was changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'quality' => array(
        'description' => "A quality rating assigned to the content to tell whether or not it's spam. Experimental; Mollom might return inconsistent values.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'reputation' => array(
        'description' => "The reputation of the author. Experimental; Mollom might return inconsistent values.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'languages' => array(
        'description' => "A space-delimited language codes the content might be written in. Experimental; Mollom might return inconsistent values.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array('session' => array('session')),
    'primary key' => array('entity', 'did'),
  );

  $schema['mollom_form'] = array(
    'description' => 'Stores configuration for forms protected by Mollom.',
    'fields' => array(
      'form_id' => array(
        'description' => 'The $form_id of the form being protected.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mode' => array(
        'description' => 'The configured protection mode to use for the form.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled_fields' => array(
        'description' => 'A list of form elements configured for textual analysis.',
        'type' => 'text',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
      'module' => array(
        'description' => 'The module name the $form_id belongs to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => "Serialized data containing the form's Mollom options.",
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('form_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function mollom_install() {
  // Point the user to Mollom's settings page after installation.
  $requirements = mollom_requirements('runtime', FALSE);
  drupal_set_message($requirements['mollom']['description'], 'warning');
}

/**
 * Implements hook_uninstall().
 */
function mollom_uninstall() {
  db_delete('variable')->condition('name', 'mollom_%', 'LIKE')->execute();
}

/**
 * An update function to add the language field.
 */
function mollom_update_1() {
  db_add_field('mollom', 'languages', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));
}

/**
 * Create the cache_mollom table.
 */
function mollom_update_2() {
  $schema = drupal_get_schema_unprocessed('system', 'cache');
  db_create_table('cache_mollom', $schema);
}

/**
 * Upgrade form protection storage.
 */
function mollom_update_3() {
  // Load hook_mollom_form_info() implementations for mollom_form_list().
  foreach (module_list(FALSE, FALSE) as $module) {
    drupal_load('module', $module);
  }
  drupal_load('module', 'mollom');

  foreach (mollom_form_list() as $form_id => $info) {
    $name = 'mollom_' . $form_id;
    $mode = variable_get($name, NULL);
    // $mode was stored as 1; convert to MOLLOM_MODE_ANALYSIS.
    if (isset($mode)) {
      variable_set($name, MOLLOM_MODE_ANALYSIS);
    }
  }
}

/**
 * Add a reputation field to the mollom table.
 */
function mollom_update_4() {
  db_add_field('mollom', 'reputation', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));
}

/**
 * Add the {mollom_form} table.
 */
function mollom_update_6105() {
  if (db_table_exists('mollom_form')) {
    return;
  }
  $schema = array(
    'fields' => array(
      'form_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mode' => array(
        'description' => 'The configured protection mode to use for the form.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled_fields' => array(
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'module' => array(
        'description' => 'The module name the $form_id belongs to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('form_id'),
  );
  db_create_table('mollom_form', $schema);

  // Migrate form configuration for enabled, supported modules.
  foreach (module_list(FALSE, FALSE) as $module) {
    drupal_load('module', $module);
  }
  drupal_load('module', 'mollom');

  $form_list = mollom_form_list();
  $result = db_query("SELECT name, value FROM {variable} WHERE name LIKE 'mollom_%%' AND name NOT IN ('mollom_servers', 'mollom_fallback', 'mollom_public_key', 'mollom_private_key')");
  foreach ($result as $row) {
    $form_id = substr($row->name, 7);
    $mode = unserialize($row->value);
    if (!empty($mode) && isset($form_list[$form_id])) {
      $info = $form_list[$form_id];
      $info += mollom_form_info($form_id, $info['module']);
      $info['enabled_fields'] = ($mode == MOLLOM_MODE_ANALYSIS ? array_keys($info['elements']) : array());
      db_insert('mollom_form')
        ->fields(array(
          'form_id' => $form_id,
          'mode' => $mode,
          'enabled_fields' => serialize($info['enabled_fields']),
          'module' => $info['module'],
        ))
        ->execute();
    }
    variable_del($row->name);
  }
}

/**
 * Add the {mollom}.form_id column.
 *
 * @todo Rename 'did' column after mollom_set_data() and mollom_get_data() have
 *   been removed.
 */
function mollom_update_6106() {
  if (db_field_exists('mollom', 'entity')) {
    return;
  }
  // Add the 'entity' column.
  db_add_field('mollom', 'entity', array(
    'description' => 'The entity type of the content.',
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'default' => '',
  ));

  // Change the primary key to prevent duplicate key errors in the following
  // data conversions.
  db_drop_primary_key('mollom');
  db_add_primary_key('mollom', array('entity', 'did'));

  // Migrate existing node data.
  db_update('mollom')
    ->fields(array('entity' => 'node'))
    ->condition('did', 'node-%', 'LIKE')
    ->execute();
  db_update('mollom')
    ->fields(array('did' => 'SUBSTR(did, 6)')) // @todo Expressions in UPDATE?
    ->condition('entity', 'node')
    ->execute();
  // Migrate existing comment data.
  db_update('mollom')
    ->fields(array('entity' => 'comment'))
    ->condition('did', 'comment-%', 'LIKE')
    ->execute();
  db_update('mollom')
    ->fields(array('did' => 'SUBSTR(did, 9)')) // @todo Expressions in UPDATE?
    ->condition('entity', 'comment')
    ->execute();

  // Decrease the size of the 'did' column.
  // @todo We do not change the type to 'int' here to still support named
  //   identifiers. Reconsider this.
  db_change_field('mollom', 'did', 'did', array(
    'description' => 'Unique data ID of the content.',
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'default' => '',
  ));
}

/**
 * Disable the privacy policy link for existing sites by default.
 */
function mollom_update_6107() {
  variable_set('mollom_privacy_link', 0);
}

/**
 * Rename 'post with no checking' permission to 'bypass mollom protection'.
 */
function mollom_update_6108() {
  db_update('role_permission')
    ->fields(array('permission' => 'bypass mollom protection'))
    ->condition('permission', 'post with no checking')
    ->execute();
}

/**
 * Rename 'fields' column to 'enabled_fields'; previously introduced in mollom_update_6105().
 *
 * 'fields' is a reserved keyword in MySQL.
 */
function mollom_update_6109() {
  if (db_field_exists('mollom_form', 'fields')) {
    db_change_field('mollom_form', 'fields', 'enabled_fields', array(
      'type' => 'text',
      'serialize' => TRUE,
    ));
  }
}

/**
 * Automatically update the new 'mollom_status' variable.
 *
 * _mollom_status() was introduced in 6.x-1.11 to prevent Mollom from
 * interfering with forms when it is incorrectly configured. Sites updating from
 * previous versions should be correctly configured, so we just invoke it here.
 */
function mollom_update_6110() {
  drupal_load('module', 'mollom');
  _mollom_status(TRUE);
}

/**
 * Fix enabled_fields array for CAPTCHA-only protected forms.
 *
 * mollom_update_6105() incorrectly stored enabled_fields values for forms
 * protected by CAPTCHAs only.
 */
function mollom_update_6111() {
  db_update('mollom_form')
    ->fields(array(
      'enabled_fields' => serialize(array()),
    ))
    ->condition('mode', 1)
    ->execute();
}

/**
 * Migrate form configuration for changed form ids in Drupal 7.
 */
function mollom_update_7000() {
  // 'user_register' became 'user_register_form'.
  db_update('mollom_form')
    ->fields(array('form_id' => 'user_register_form'))
    ->condition('form_id', 'user_register')
    ->execute();
  // 'contact_mail_page' became 'contact_site_form'.
  db_update('mollom_form')
    ->fields(array('form_id' => 'contact_site_form'))
    ->condition('form_id', 'contact_mail_page')
    ->execute();
  // 'contact_mail_user' became 'contact_personal_form'.
  db_update('mollom_form')
    ->fields(array('form_id' => 'contact_personal_form'))
    ->condition('form_id', 'contact_mail_user')
    ->execute();
}

/**
 * Remove the {cache_mollom} table.
 */
function mollom_update_7001() {
  db_drop_table('cache_mollom');
}

/**
 * Add {mollom}.changed column to auto-flush expired entries.
 */
function mollom_update_7002() {
  if (!db_field_exists('mollom', 'changed')) {
    db_add_field('mollom', 'changed', array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ));
  }
}

/**
 * Add {mollom}.data to store the individual form configuration.
 */
function mollom_update_7003() {
  //@todo Migrate {mollom}.enabled_fields to this data.
  if (!db_field_exists('mollom_form', 'data')) {
    // First add the {mollom_form}.data as a nullable field.
    db_add_field('mollom_form', 'data', array(
      'type' => 'text',
      'serialized' => TRUE,
    ));
    // Update {mollom_form}.data to equal an empty serialized array.
    db_update('mollom_form')
      ->fields(array(
        'data' => serialize(array()),
      ))
      ->execute();
    // Change the {mollom_form}.data field to not allow nullable values.
    db_change_field('mollom_form', 'data', 'data', array(
      'type' => 'text',
      'not null' => TRUE,
      'serialized' => TRUE,
    ));
  }
}
